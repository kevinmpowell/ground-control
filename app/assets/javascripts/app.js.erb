// Nothing here yet
Pusher.log = function(message) {
  if (window.console && window.console.log) {
    window.console.log(message);
  }
};

var GithubSyncMonitor = function(websockets_channel){
	var issues_to_be_synced = 0;
	var issues_synchronized = 0;
	var $progress_bar = $(".github-sync-progress-inner");

	function update_progress_bar_width(){
		var width = (issues_synchronized / issues_to_be_synced) * 100;
		$progress_bar.css({"width":width+"%"});
	}

	function set_progress_bar_state(args) {
		if (args.hasOwnProperty("state") && args.state == "complete"){
			$progress_bar.css({"width":"100%"}).addClass("complete");
		}
	}

	function update_github_issue_sync_count(data){
		issues_to_be_synced = data.total_issues;
		console.log("TO BE SYNCED: " + issues_to_be_synced);

		if (data.total_issues == 0) {
			$(document).trigger("github-issue-sync-complete");
		}
	}

	function update_github_issues_synced(data) {
		console.log(data.issue_title + " - Synced");
		issues_synchronized++;
		console.log("ISSUES SYNCHRONIZED: " + issues_synchronized);
		if (issues_synchronized == issues_to_be_synced){
			$(document).trigger("github-issue-sync-complete");
		}
		update_progress_bar_width();
	}

	function bind_websockets_events(){
		websockets_channel.bind('github_issue_sync_count', function(data) {
		  update_github_issue_sync_count(data);
		});

		websockets_channel.bind('github_issue_synced', function(data) {
		  update_github_issues_synced(data);
		});
	}

	function initiate_github_sync_for_current_user() {
		$.ajax({
			url:'synchronize-github-issues-for-user/' + current_user_id,
			type: 'PUT'
		});
	}

	function bind_listeners(){
		$(document).on("github-issue-sync-complete", function(){
			set_progress_bar_state({"state": "complete"});
		});

		$(document).on("synchronize-github-issues-for-current-user", function(){
			initiate_github_sync_for_current_user();
		});
	}

	function bind_event_handlers() {
		$(document).on("click", ".js-synchronize-github-issues-for-current-user", function(e){
			e.preventDefault();
			$(document).trigger("synchronize-github-issues-for-current-user");
		});
	}

	function init() {
		bind_event_handlers();
		bind_listeners();
		bind_websockets_events();
		// initiate_github_sync_for_current_user();
	}

	init();
}

var GithubIssueList = function() {
	var $issue_list = $(".issue-list");

	function update_issue_sort_order(sorted_issue_ids) {
		$.ajax({
			url:'update-issue-sort-order.json',
			data: {
				sorted_issue_ids: sorted_issue_ids
			},
			dataType:'html',
			type: 'PUT',
			success: function(){
				// DO NOTHING
				// alert("SORTED!");
			},
			error: function(a, b, c){
				console.log(a);
				console.log(b);
				console.log(c);
				alert("An error occurred while persisting the sort order");
			}
		});
	}

	function make_sortable() {
		$issue_list.sortable({
			stop: function(event, ui) {
				var sorted_issue_ids = $issue_list.sortable("toArray", {attribute:"data-issue-id"});
				update_issue_sort_order(sorted_issue_ids);
			}
		});
	}

	function filter_by_client(params) {
		var $target = $(params.target);
		var client_name = $target.val();

		var client_names = params.client_names;
		for (var index in client_names) {
			$issue_list.removeClass("client-filter-" + client_names[index]);
		}

		$issue_list.addClass("client-filter-" + client_name);
	}

	function bind_listeners() {
		$(document).on("filter-by-client", function(e, params) {
			filter_by_client(params);
		});
	}

	function init() {
		make_sortable();
		bind_listeners();
	}

	init();
}

var GithubIssueFilter = function() {
	var client_names = [];

	function set_client_names() {
		$(".js-filter-by-client").each(function(){
			client_names.push($(this).val());
		});
	}

	function bind_event_handlers() {
		$(document).on("change", ".js-filter-by-client", function(e) {
			$(document).trigger($(e.target).data("event"), {target: e.target, client_names: client_names});
		});
	}

	function init() {
		set_client_names();
		bind_event_handlers();
	}
	init();
}

$(document).ready(function(){
	if (typeof current_user_pusher_channel !== undefined) {
		var pusher = new Pusher("<%= ENV['PUSHER_CLIENT_KEY']%>");
		var channel = pusher.subscribe(current_user_pusher_channel);

		channel.bind('pusher:subscription_succeeded', function(){
			GithubSyncMonitor = new GithubSyncMonitor(channel);
			GithubIssueList = new GithubIssueList();
			GithubIssueFilter = new GithubIssueFilter();
		});
	}

})
